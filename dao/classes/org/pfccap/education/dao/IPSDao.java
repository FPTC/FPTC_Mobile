package org.pfccap.education.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.pfccap.education.dao.IPS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IPS".
*/
public class IPSDao extends AbstractDao<IPS, Long> {

    public static final String TABLENAME = "IPS";

    /**
     * Properties of entity IPS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdIps = new Property(1, Long.class, "idIps", false, "ID_IPS");
        public final static Property IdPais = new Property(2, String.class, "idPais", false, "ID_PAIS");
        public final static Property IdCiudad = new Property(3, String.class, "idCiudad", false, "ID_CIUDAD");
        public final static Property IdEse = new Property(4, String.class, "idEse", false, "ID_ESE");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property State = new Property(6, Boolean.class, "state", false, "STATE");
    };


    public IPSDao(DaoConfig config) {
        super(config);
    }
    
    public IPSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IPS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_IPS\" INTEGER," + // 1: idIps
                "\"ID_PAIS\" TEXT," + // 2: idPais
                "\"ID_CIUDAD\" TEXT," + // 3: idCiudad
                "\"ID_ESE\" TEXT," + // 4: idEse
                "\"NAME\" TEXT," + // 5: name
                "\"STATE\" INTEGER);"); // 6: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IPS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IPS entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long idIps = entity.getIdIps();
        if (idIps != null) {
            stmt.bindLong(2, idIps);
        }
 
        String idPais = entity.getIdPais();
        if (idPais != null) {
            stmt.bindString(3, idPais);
        }
 
        String idCiudad = entity.getIdCiudad();
        if (idCiudad != null) {
            stmt.bindString(4, idCiudad);
        }
 
        String idEse = entity.getIdEse();
        if (idEse != null) {
            stmt.bindString(5, idEse);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        Boolean state = entity.getState();
        if (state != null) {
            stmt.bindLong(7, state ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public IPS readEntity(Cursor cursor, int offset) {
        IPS entity = new IPS( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idIps
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idPais
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // idCiudad
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // idEse
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IPS entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdIps(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIdPais(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIdCiudad(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdEse(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setState(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(IPS entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(IPS entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
