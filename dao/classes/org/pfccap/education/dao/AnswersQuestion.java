package org.pfccap.education.dao;

import org.pfccap.education.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ANSWERS_QUESTION".
 */
public class AnswersQuestion {

    private Long id;
    private String description;
    private String value;
    private String points;
    private long idQuestion;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AnswersQuestionDao myDao;

    private Question question;
    private Long question__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public AnswersQuestion() {
    }

    public AnswersQuestion(Long id) {
        this.id = id;
    }

    public AnswersQuestion(Long id, String description, String value, String points, long idQuestion) {
        this.id = id;
        this.description = description;
        this.value = value;
        this.points = points;
        this.idQuestion = idQuestion;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAnswersQuestionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public String getPoints() {
        return points;
    }

    public void setPoints(String points) {
        this.points = points;
    }

    public long getIdQuestion() {
        return idQuestion;
    }

    public void setIdQuestion(long idQuestion) {
        this.idQuestion = idQuestion;
    }

    /** To-one relationship, resolved on first access. */
    public Question getQuestion() {
        long __key = this.idQuestion;
        if (question__resolvedKey == null || !question__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionDao targetDao = daoSession.getQuestionDao();
            Question questionNew = targetDao.load(__key);
            synchronized (this) {
                question = questionNew;
            	question__resolvedKey = __key;
            }
        }
        return question;
    }

    public void setQuestion(Question question) {
        if (question == null) {
            throw new DaoException("To-one property 'idQuestion' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.question = question;
            idQuestion = question.getId();
            question__resolvedKey = idQuestion;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
