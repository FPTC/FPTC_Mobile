package org.pfccap.education.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.pfccap.education.dao.Questions;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTIONS".
*/
public class QuestionsDao extends AbstractDao<Questions, Long> {

    public static final String TABLENAME = "QUESTIONS";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Idquest = new Property(1, String.class, "idquest", false, "IDQUEST");
        public final static Property TxtQuestion = new Property(2, String.class, "txtQuestion", false, "TXT_QUESTION");
        public final static Property TypeCancer = new Property(3, String.class, "typeCancer", false, "TYPE_CANCER");
        public final static Property TypeQuestion = new Property(4, String.class, "typeQuestion", false, "TYPE_QUESTION");
        public final static Property Order = new Property(5, Integer.class, "order", false, "ORDER");
        public final static Property Enable = new Property(6, Boolean.class, "enable", false, "ENABLE");
        public final static Property Info = new Property(7, String.class, "info", false, "INFO");
        public final static Property Answers = new Property(8, String.class, "answers", false, "ANSWERS");
    };


    public QuestionsDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTIONS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IDQUEST\" TEXT," + // 1: idquest
                "\"TXT_QUESTION\" TEXT," + // 2: txtQuestion
                "\"TYPE_CANCER\" TEXT," + // 3: typeCancer
                "\"TYPE_QUESTION\" TEXT," + // 4: typeQuestion
                "\"ORDER\" INTEGER," + // 5: order
                "\"ENABLE\" INTEGER," + // 6: enable
                "\"INFO\" TEXT," + // 7: info
                "\"ANSWERS\" TEXT);"); // 8: answers
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTIONS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Questions entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idquest = entity.getIdquest();
        if (idquest != null) {
            stmt.bindString(2, idquest);
        }
 
        String txtQuestion = entity.getTxtQuestion();
        if (txtQuestion != null) {
            stmt.bindString(3, txtQuestion);
        }
 
        String typeCancer = entity.getTypeCancer();
        if (typeCancer != null) {
            stmt.bindString(4, typeCancer);
        }
 
        String typeQuestion = entity.getTypeQuestion();
        if (typeQuestion != null) {
            stmt.bindString(5, typeQuestion);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(6, order);
        }
 
        Boolean enable = entity.getEnable();
        if (enable != null) {
            stmt.bindLong(7, enable ? 1L: 0L);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(8, info);
        }
 
        String answers = entity.getAnswers();
        if (answers != null) {
            stmt.bindString(9, answers);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Questions readEntity(Cursor cursor, int offset) {
        Questions entity = new Questions( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idquest
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // txtQuestion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // typeCancer
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // typeQuestion
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // order
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // enable
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // info
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // answers
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Questions entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdquest(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTxtQuestion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTypeCancer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTypeQuestion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrder(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setEnable(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setInfo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAnswers(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Questions entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Questions entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
